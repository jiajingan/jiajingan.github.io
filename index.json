[{"content":" In this past couple OAs (IBM, Citizens Bank just to name a few), I have been taking L\u0026rsquo;s on the database questions. As a CS major in my university, SQL is not part of our curriculum. So I decided to make this post to go over some basic concepts in SQL. SQL is a query language and data is usually stored in tables After some research, I have decided to use MySQL since it is the most popular database. In the future I will also cover some PostgreSql Resources https://www.w3schools.com/sql/default.asp https://sqlzoo.net/wiki/SQL_Tutorial https://www.sql-practice.com/ https://pgexercises.com/ Basic concepts SELECT - extracts data from a database SELECT CustomerName, City FROM Customers;, CustomerName and City are the headers, Customers is the table name SELECT DISTINCT CustomerName, City FROM Customers;, the distinct keyword will select unique values from customername(e.g. joe will not appear twice in the query). SELECT * FROM Customers WHERE Country='Mexico';, this query will select everything from Customers tables where country is Mexico. syntax for selectSELECT column1, column2, ... FROM table_name; syntax for select with distinct SELECT DISTINCT column1, column2, ... FROM table_name; syntax for select with where SELECT column1, column2, ... FROM table_name WHERE condition; we can also used key words like or, and, and not syntax for where and WHERE condition1 AND condition2 AND condition3 ...;, for where or WHERE condition1 OR condition2 OR condition3 ...;, for where not WHERE NOT condition; syntax SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;, ASC(ascending) is default and DESC(descending) needs manual input UPDATE - updates data in a database UPDATE table_name SET column1 = value1, column2 = value2, ...WHERE condition;, use set to pick columns and where to select specific condition DELETE - deletes data from a database DELETE FROM table_name WHERE condition; DELETE FROM table_name; deleting all the data but not the table INSERT INTO - inserts new data into a database syntax INSERT INTO table_name (column1, column2, column3, ...)VALUES (value1, value2, value3, ...); , you don\u0026rsquo;t always need to list out the columns Functions MAX(), MIN(), COUNT(), AVG(), SUM() example: SELECT COUNT(column_name) FROM table_name WHERE condition; LIKE - check patterns SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern; please refer to other resources in the pattern, there is also wildcard patterns IN, BETWEEN, ALIASES IN selects a certain value, WHERE column_name IN (value1, value2, ...); BETWEEN is between 2 values, WHERE column_name BETWEEN value1 AND value2; ALIASES is just shorting the name, SELECT column_name AS alias_name FROM table_name; JOINS There is 4 different types of joins INNER JOIN is like intersection of a two sets LEFT JOIN is getting the insection and the left RIGHT JOIN is getting the insection and the right FULL JOIN is getting like union, group everything together example: SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name; GROUP BY - group into summary rows We can also use functions in these example: SELECT COUNT(CustomerID), Country FROM CustomersGROUP BY Country; CREATE DATABASE - creates a new database CREATE DATABASE databasename; CREATE TABLE - creates a new table CREATE TABLE table_name ( column1 datatype, column2 datatype,column3 datatype, ....); ALTER TABLE - modifies a table syntax ALTER TABLE table_name ADD column_name datatype; or you can also drop columns DROP TABLE - deletes a table DROP TABLE table_name; TRUNCATE TABLE table_name; delete database not table itself CREATE INDEX - creates an index (search key) syntax CREATE INDEX index_name ON table_name (column1, column2, ...); creates a index column DROP INDEX - deletes an index different server has different way to drop index syntax for MySQL ALTER TABLE table_name DROP INDEX index_name; SQL is not case sensitive SQL statements ends with a semicolon Relational vs Non Relational Database Relational Database (e.g. SQL) ACID atomicity, consistency, isolation, and durability Stores everything in tables High cost of scalability Needs consistent data that is categorized consistent/reliable Used for structure data such as customer data that has a name, address, city, postal code, phone number Non Relational Database (e.g. NoSQL) Flexible data expansion not consistent/reliable Highly scalable Used for high complexity and diverse data that has no direct correlation such as personalized data, patient data ","permalink":"https://jackiegan.com/posts/sql/","summary":"In this past couple OAs (IBM, Citizens Bank just to name a few), I have been taking L\u0026rsquo;s on the database questions. As a CS major in my university, SQL is not part of our curriculum. So I decided to make this post to go over some basic concepts in SQL. SQL is a query language and data is usually stored in tables After some research, I have decided to use MySQL since it is the most popular database.","title":"SQL"},{"content":" Back in my sophomore year I got rejected by 3 internships (or more) because my OOP skills weren\u0026rsquo;t good enough. I want to make this post to remind myself I know the concepts. Java Basic Concepts\nWhat is a class? A class is a blueprint of anything, I mean literally anything. You can also have nested class too (this is too advanced for now). For example, a car has an engine, mpg, top speed, gear type, gear amount, and etc but the class will hold all of theses. A class holds different types of fields(states) and methods(functions). What is an object? An object in Java are the attributes of differents types of function. For example, a car has an engine, mpg, top speed, gear type, gear amount, and etc but the class will hold all of theses. For example, there is a toyota camry, honda civic, and etc. You can use the class to make an object. Note: instance and object are the same thing What is interface? An interface is an blueprint of a class. It can only hold static constants and abstract methods. These type of methods are only used to define things but cannot hold values. For example, a car interface would consist types of methods like public float mpg, public int gearType = \u0026quot;\u0026quot; and etc. What is a Package? A package in java is like a library in other languages. You can import a class that has functions that can write codes more efficiently. For example, import java.util.Scanner;, this only imports the scanner class from util library. You can also import everything from util by import java.util.*; What does static mean? Static keyword means it belongs to a certain member or class type. For example, you can define a car brand like toyota in car class. They are global variables for a class. So it means you can access it without using the object compared to just declaring string make. There is static blocks, variables, methods, and classes. What is OOP?\nObject Orient Programming is a type of software design that is designed around objects (it\u0026rsquo;s in the name).\nThere are 4 main concepts Encapsulation\nThis concepts will be used to hide data from other classes. So we need to have private variables and setter and getters method to access them. setter will modify the variables getter will get the variables Then we can access the encapsulated class in another class without interfering other variables public class EncapTest { private String name; private String idNum; private int age; public int getAge() { return age; } public String getName() { return name; } public String getIdNum() { return idNum; } public void setAge( int newAge) { age = newAge; } public void setName(String newName) { name = newName; } public void setIdNum( String newId) { idNum = newId; } } /* File name : RunEncap.java */ public class RunEncap { public static void main(String args[]) { EncapTest encap = new EncapTest(); encap.setName(\u0026#34;James\u0026#34;); encap.setAge(20); encap.setIdNum(\u0026#34;12343ms\u0026#34;); System.out.print(\u0026#34;Name : \u0026#34; + encap.getName() + \u0026#34; Age : \u0026#34; + encap.getAge()); } } source https://www.tutorialspoint.com/java/java_encapsulation.htm Abstraction\nThis concept is used to hide certain details and only showing essential informations An abstract class is a restricted class that can used to create objects, must be interited An abstract method can only be used in abstract class and it does not have a body // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\u0026#34;Zzz\u0026#34;); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\u0026#34;The pig says: wee wee\u0026#34;); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } source https://www.w3schools.com/java/java_abstract.asp We can see above animal class is getting inherited by pig class. Then we see the abstract method has no body. Abstraction is used to generalize things, for example there are many types of animal. All animals has color, age, and etc Inheritance\nThis concept is to inherit another class\u0026rsquo;s attributes and methods A subclass is a child and it inherits from another class A superclass is a parent and is being inherited to another class (e.g. abstract class) class Vehicle { protected String brand = \u0026#34;Ford\u0026#34;; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\u0026#34;Tuut, tuut!\u0026#34;); } } class Car extends Vehicle { private String modelName = \u0026#34;Mustang\u0026#34;; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \u0026#34; \u0026#34; + myCar.modelName); } } source https://www.w3schools.com/java/java_inheritance.asp As we can see above, Vehicle is the superclass and the Car is a subclass. Using the extends keyword will inherit the class. We can also use the honk method and the brand variable from vehicle since it is inherited. Polymorphism\nThis is probably the hardest concept for me to wrap around, remember failing this interview so hard. This concept is used to create many form. For example, an animal can be a dog, a cat or other animals. class Animal { public void animalSound() { System.out.println(\u0026#34;The animal makes a sound\u0026#34;); } } class Pig extends Animal { public void animalSound() { System.out.println(\u0026#34;The pig says: wee wee\u0026#34;); } } class Dog extends Animal { public void animalSound() { System.out.println(\u0026#34;The dog says: bow wow\u0026#34;); } } class Main { public static void main(String[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } } source https://www.w3schools.com/java/java_polymorphism.asp As we can see above Animal class can be a pig or a dog or a myanimal. It can be many forms, they are all come from the same class. Bonus!!!!!\nTwo more concepts that are extremely important, overloading and overriding in methods Overloading is having two methods of the same name but different arguments class MethodOverloadingEx { static int add(int a, int b) { return a + b; } static int add(int a, int b, int c) { return a + b + c; } public static void main(String args[]) { System.out.println(\u0026#34;add() with 2 parameters\u0026#34;); System.out.println(add(4, 6)); System.out.println(\u0026#34;add() with 3 parameters\u0026#34;); System.out.println(add(4, 6, 7)); } } Overriding is overrides a class method from another class. This means it can the method from superclass in the subclass. Overriding is very common in polymorphism like above. class Animal { void eat() { System.out.println(\u0026#34;eat() method of base class\u0026#34;); System.out.println(\u0026#34;eating.\u0026#34;); } } class Dog extends Animal { void eat() { System.out.println(\u0026#34;eat() method of derived class\u0026#34;); System.out.println(\u0026#34;Dog is eating.\u0026#34;); } } class MethodOverridingEx { public static void main(String args[]) { Dog d1 = new Dog(); Animal a1 = new Animal(); d1.eat(); a1.eat(); Animal animal = new Dog(); // eat() method of animal class is overridden by // base class eat() animal.eat(); } } source https://www.geeksforgeeks.org/difference-between-method-overloading-and-method-overriding-in-java/ Pros and Cons of OOP Pros You can build programs that are modular based and structured Very enterprise friendly like Java (Jobs!!!!) Everything is an object Low development cost I heard it\u0026rsquo;s more secure? Cons A lot of boilerplate code Desigining good OOP structure can be hard, and might shoot yourself in the foot sometimes Can be slow sometimes Code can get messy Everything is an object ","permalink":"https://jackiegan.com/posts/oop/","summary":"Back in my sophomore year I got rejected by 3 internships (or more) because my OOP skills weren\u0026rsquo;t good enough. I want to make this post to remind myself I know the concepts. Java Basic Concepts\nWhat is a class? A class is a blueprint of anything, I mean literally anything. You can also have nested class too (this is too advanced for now). For example, a car has an engine, mpg, top speed, gear type, gear amount, and etc but the class will hold all of theses.","title":"Object Oriented Programming with Java"},{"content":"Python is a great language for everyone. Easy to understand, and a lot of libraries to mess around with.\nHowever, managing packages in python can be a pain. Also, installing it the right way.\nI had to personally witness this myself\u0026hellip;\u0026hellip;. Installing Python (on macOS) I\u0026rsquo;m a big fan of brew, brew is a Package Manager for macOS (something like apt-get in linux). More info please check out this.\nOpen terminal and run this command to install homebrew /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Also add this path to dotfile and source it # Python with brew PATH export PATH=\u0026#34;/usr/local/opt/python/libexec/bin:$PATH\u0026#34; install python with brew brew install python Install and use Pipenv Pipenv is a virtual environment to isolate your pip packages. I use it to for all my classwork and personal projects.\nOpen terminal and run this command, for more info visit pipenv page. pip3 install --user pipenv Find your pipenv path, your path is usually \u0026lsquo;/Users/joe/Library/Python/3.10\u0026rsquo; (yours might differ). python3 -m site --user-base Add your path (pipenv is in bin directory, remember to add /bin) and source it. export PATH=\u0026#34;$PATH:/Users/joe/Library/Python/3.10/bin\u0026#34; or add this\nexport PYTHON_BIN_PATH=\u0026#34;$(python3 -m site --user-base)/bin\u0026#34; export PATH=\u0026#34;$PATH:$PYTHON_BIN_PATH\u0026#34; Pipenv is actually pretty easy to use To install packages, pipenv install \u0026lt;package\u0026gt; such as django, numpy To start environment, pipenv shell Install development packages, pipenv install \u0026lt;package\u0026gt; --dev Uninstall packages, pipenv uninstall \u0026lt;package\u0026gt; Install packages with \u0026lsquo;requirements.txt\u0026rsquo;, pipenv install -r ./requirements.txt To check if pipenv works and vulnerabilities in packages, pipenv check To update packages pipfile and lock file, pipenv install To display packages and dependencies on those packages, pipenv graph When you are in another environment (For Example you pull from github), your pipenv packages will get messed up. run pipenv lock, looks into the pipfile.lock file then run pipenv install --ignore-pipfile, this will install everything from pipfile.lock(where you left off) To remove pipenv from current dir, pipenv --rm ","permalink":"https://jackiegan.com/posts/pythonandpipenv/","summary":"Python is a great language for everyone. Easy to understand, and a lot of libraries to mess around with.\nHowever, managing packages in python can be a pain. Also, installing it the right way.\nI had to personally witness this myself\u0026hellip;\u0026hellip;. Installing Python (on macOS) I\u0026rsquo;m a big fan of brew, brew is a Package Manager for macOS (something like apt-get in linux). More info please check out this.\nOpen terminal and run this command to install homebrew /bin/bash -c \u0026#34;$(curl -fsSL https://raw.","title":"Python and Pipenv"},{"content":"Learning vim(neovim) from the goat himself, ThePrimeagen.\nVim As Your Editor (1/6): The Basic Vim Movements\nj moving down k moving up h moving left l moving right w moving forward of a word b moving backward of a word \u0026ldquo;try not to rely on your arrow keys\u0026rdquo; yy yank the line(copy it), store in the register p paste the line dd delete the line u undo the line when you want to delete a function, dd + dd + dd isn\u0026rsquo;t practical shift + v visual line mode(highlights the line), in this mode you can use jk or other commands from above. Like y,j,k,h,l and d to delete v visual word mode(hightlights where you start), in this mode you can use other commands too i insert mode, you can type anything. to escape insert mode there is ctrl + c or esc or ctrl + [ Usually, your bottom corner shows what mode you\u0026rsquo;re in you can combine vim commands together d + w or d + j or d + y :w to save file note: Practice until you\u0026rsquo;re comfortable with all of these commands Vim As Your Editor (2/6): Foundation for Speed(Part 2 here we go)\no start insert mode in the new line below shift + o start insert mode in the new line above shift + p paste one line above a insert mode at the end of the word shift + i insert mode at begining of the line shift + a insert mode at end of the the line / command mode / + 'function' command mode searching for function n hop next match or shift + n hop backward a match * jump to the word next to the cursor in hopping mode # another way to hop backward a match note: we are starting to get fasttttttttt, keep practicing ","permalink":"https://jackiegan.com/posts/vim/","summary":"Learning vim(neovim) from the goat himself, ThePrimeagen.\nVim As Your Editor (1/6): The Basic Vim Movements\nj moving down k moving up h moving left l moving right w moving forward of a word b moving backward of a word \u0026ldquo;try not to rely on your arrow keys\u0026rdquo; yy yank the line(copy it), store in the register p paste the line dd delete the line u undo the line when you want to delete a function, dd + dd + dd isn\u0026rsquo;t practical shift + v visual line mode(highlights the line), in this mode you can use jk or other commands from above.","title":"Vim"},{"content":"In the last few years, I haven\u0026rsquo;t been traveling internationally or domestically due to the unspoken deadly disease 😷. In this travel pt1, I want to share some of my favorite places that I have traveled before the pandemic and places I have traveled this summer.\nAtlanta, GA (ATL) I have to admit I had a great time at Atlanta with friends. There is a lot to the city, a lot of places to visit such as Atlanta Botanical Garden, World of Coca-Cola, Georgia Aquarium and so on. The Botanical Garden is HUGE!!!! Get yourself a good pair of walking shoes before you go there. The weather is relatively warm during the summer, great food (Atlanta Breakfast Club). Midtown looks very nice, it has it\u0026rsquo;s own tech hub going on with all the big corps. Georgia Tech is also there. There is a lot of see and a lot to do.\nrating: ★★★★☆\nCharlotte, NC (CLT) Charlotte was quite the unique experience for me. It the kind of town you need to know where to go, because their center city(uptown) is pretty dead during the weekend(just a bunch of corporate offices). Places like South End, Optimist Hall and Noda was pretty interesting. However, Charlotte is a big city, there is a lot to do if you are willing to drive a bit. If you ever go to Charlotte, must try out Boardwalk Billy\u0026rsquo;s and Cookout!!. The food scene is pretty mediocre, I haven\u0026rsquo;t found anything that was spectacular. I feel like this city has a lot of hidden gems that I haven\u0026rsquo;t explored yet.\nrating: ★★★☆☆\nMelbourne, FL (MLB) I spent a good portion of my life in Melbourne FL during the summer. It\u0026rsquo;s more known as a beach town an hour outside of Orlando. I think it\u0026rsquo;s a great place to come once in a while for vacation. Beautiful ocean, quiet, hearing the ocean washing up the shore was soul soothing. The beaches is not crowded!!! Highly recommend to walk along the beach by sunset. The food scene is pretty mediocre like worse than CLT. You will find a lot of older gentlemen and ladies in the area. There is only one place I can really recommend, MisterO1.\nrating: ★★☆☆☆ (2.5, there is no half a star)\nSingapore (it\u0026rsquo;s a country) I went to singapore a couple years ago, I think it\u0026rsquo;s probably one of the cleanest and nicest places I have ever been to. It\u0026rsquo;s a hidden gem in Asia. Everyone talks about Korea, Japan, Thailand. I haven\u0026rsquo;t been to those places but I think Singapore is unique for itself. It\u0026rsquo;s clean, well organized, great food. Their architecture is top notch, very modern and well designed. The food scene is awesome, you can just go to some random hawker stand, you should be able to find good food. Very small and compact city. It\u0026rsquo;s just very expensive.\nrating: ★★★★☆\n","permalink":"https://jackiegan.com/posts/travel/","summary":"In the last few years, I haven\u0026rsquo;t been traveling internationally or domestically due to the unspoken deadly disease 😷. In this travel pt1, I want to share some of my favorite places that I have traveled before the pandemic and places I have traveled this summer.\nAtlanta, GA (ATL) I have to admit I had a great time at Atlanta with friends. There is a lot to the city, a lot of places to visit such as Atlanta Botanical Garden, World of Coca-Cola, Georgia Aquarium and so on.","title":"Travel pt1"},{"content":"Computer Science \u0026amp; Mathematics bulletin\nSpring 2023 (TBA credits) GUS 1173 - Urban Affairs: Black Males in the City Instructor Walter R. Gholson, III ART 1101 - Introduction to Beginning Ceramics for Non-Tyler BFA Majors Instructor: Leonor Marion-Landais MUSC 1408 - Piano for Non-Music Majors II Instructor: Cathy Liu MATH 3031 - Probability Theory I Instructor: Wei-Shih Yang CIS 4360 - Current Topics in Information science and Technology: Microservice Architecture instructor: Carl Williams CIS 4397 - Independent Research in Computer Science Instructor: Yu Wang Fall 2022 (17 credits) KINS 1009 - Backpacking and Camping I Instructor: Richard M. Stein MATH 3096 - Introduction to Modern Algebra Instructor: Maria Lorenz CIS 4397 - Independent Research in Computer Science Instructor: Yu Wang MATH 3031 - Probability Theory I Instructor: Wei-Shih Yang CIS 5526 - Machine Learning (Graduate Course) Instructor: Slobodan Vucetic CIS 5511 - Programming Techniques (Graduate Course) Instructor: Alex Pang Spring 2022 (18 credits) MATH 3044 - Numerical Analysis II Instructor: Qingguang Guan MATH 2111 - Basic Concepts of Math Instructor: Charles Osborne CIS 4282 - Independent Study Instructor: Yu Wang MUST 0809 - World Musics \u0026amp; Cultures (ETS) Instructor: Marion Jacob IH 0851 - Intellectual Heritage I: The Good Life (ETS) Instructor: Maria Ponce De Leon IH 0852 - Intellectual Heritage II: The Common Good Instructor: David Mislin Fall 2021 (12 credits) CIS 3207 - Introduction to Systems Programming \u0026amp; Operating Systems Instructor: Gene Kwatny MATH 3043 - Numerical Analysis I Instructor: Qingguang Guan Lab: Jacob S. Woods CIS 3223 - Data Structures and Algorithms Instructor: Anthony Hughes MUSC 1407 - Piano for Non-Music Majors I Instructor: Cathy Liu Summer 2021 (4 credits) MATH 2043 - Calculus III Instructor: Boris A. Datskovsky Spring 2021 (18 credits) CIS 2168 - Data Structures Instructor: Andrew B. Rosen CIS 2166 - Mathematical Concepts in Computinng II Instructor: David Dobor CIS 2107 - Computer Systems and Low-Level Programming Instructor: Sophia Salvatore FMA 0869 - Imaginary Cities (ETS) Instructor: Josette Todaro MATH 2101 - Linear Algebra Instructor: Daniel B. Szyld Fall 2020 (19 credits) CHEM 2201 - Organic Chemistry I Instructor: Daniele Ramella CIS 1166 - Mathematical Concepts in Computing I Instructor: Edward T. Crotty MATH 1042 - Calculus II Instructor: Abraham Abebe CIS 1068 - Program Design and Abstraction Instructor: John Fiore ENG 0802 - Analytical Reading and Writing Instructor: Christy Davids Spring 2020 (18 credits) CHEM 1032 - General Chemistry II Instructor: Michael J. Zdilla CHEM 1034 - General Chemistry Laboratory II Coordinator: John B. Michel Instructor: Shaoyang Wu AAAS 0829 - The History \u0026amp; Significance of Race in America Instructor: Mikana S. Scott BIOL 1111 - Introduction to Organismal Biology Instructor: Michael J. Balsai EDUC 0819 - Tweens and Teens Instructor: James Byrnes MATH 1041 - Calculus I Instructor: Brandi Henry Fall 2019 (16 credits) CHEM 1031 - General Chemistry I Instructor: Danile Ramella CHEM 1033 - General Chemistry Lab I Coordinator: John B. Michel Instructor: Alan Shaffer ECON 0858 - The American Economy Instructor: Jane H. Frankel ENG 0701 - Intro to Acad Discourse Instructor: Anne Layman-Horn MATH 1022 - Precalculus Instructor: Jessica Babcock SCTC 1001 - CST First Year Seminar Steven A. Fleming ","permalink":"https://jackiegan.com/posts/coursework/","summary":"Computer Science \u0026amp; Mathematics bulletin\nSpring 2023 (TBA credits) GUS 1173 - Urban Affairs: Black Males in the City Instructor Walter R. Gholson, III ART 1101 - Introduction to Beginning Ceramics for Non-Tyler BFA Majors Instructor: Leonor Marion-Landais MUSC 1408 - Piano for Non-Music Majors II Instructor: Cathy Liu MATH 3031 - Probability Theory I Instructor: Wei-Shih Yang CIS 4360 - Current Topics in Information science and Technology: Microservice Architecture instructor: Carl Williams CIS 4397 - Independent Research in Computer Science Instructor: Yu Wang Fall 2022 (17 credits) KINS 1009 - Backpacking and Camping I Instructor: Richard M.","title":"Undergraduate Coursework"},{"content":"Hello World!\nWe all start from somewhere! :))\n","permalink":"https://jackiegan.com/posts/intro/","summary":"Hello World!\nWe all start from somewhere! :))","title":"Intro"}]